<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" ignored="2" total="9" passed="5">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="64597" started-at="2023-02-03T05:57:10Z" finished-at="2023-02-03T05:58:15Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="64597" started-at="2023-02-03T05:57:10Z" finished-at="2023-02-03T05:58:15Z">
      <class name="org.screen.ScreenshotWithFailedTestCase">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="beforeClass" is-config="true" duration-ms="4651" started-at="2023-02-03T05:57:10Z" finished-at="2023-02-03T05:57:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2023-02-03T05:57:15Z" finished-at="2023-02-03T05:57:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="testB()[pri:-1, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="testB" duration-ms="7719" started-at="2023-02-03T05:57:15Z" finished-at="2023-02-03T05:57:23Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
Verify Lastname expected [jaya] but found [vijaya]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
Verify Lastname expected [jaya] but found [vijaya]
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)
at org.screen.ScreenshotWithFailedTestCase.testB(ScreenshotWithFailedTestCase.java:91)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testB -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="afterMethod" is-config="true" duration-ms="169" started-at="2023-02-03T05:57:23Z" finished-at="2023-02-03T05:57:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testB status=FAILURE method=ScreenshotWithFailedTestCase.testB()[pri:-1, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2023-02-03T05:57:23Z" finished-at="2023-02-03T05:57:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="testA()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="testA" duration-ms="51793" started-at="2023-02-03T05:57:23Z" finished-at="2023-02-03T05:58:15Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
Verify user  expected [jay] but found [vijay]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
Verify user  expected [jay] but found [vijay]
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:43)
at org.screen.ScreenshotWithFailedTestCase.testA(ScreenshotWithFailedTestCase.java:56)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testA -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="afterMethod" is-config="true" duration-ms="181" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testA status=FAILURE method=ScreenshotWithFailedTestCase.testA()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="testC()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="testC" duration-ms="2" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testC -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="afterMethod" is-config="true" duration-ms="1" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testC status=SUCCESS method=ScreenshotWithFailedTestCase.testC()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="testE()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="testE" duration-ms="2" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testE -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="afterMethod" is-config="true" duration-ms="1" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testE status=SUCCESS method=ScreenshotWithFailedTestCase.testE()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="testF()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="testF" duration-ms="7" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testF -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="afterMethod" is-config="true" duration-ms="9" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testF status=SUCCESS method=ScreenshotWithFailedTestCase.testF()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="testF()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="testF" duration-ms="2" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testF -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="afterMethod" is-config="true" duration-ms="0" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testF status=SUCCESS method=ScreenshotWithFailedTestCase.testF()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="testF()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="testF" duration-ms="3" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testF -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="afterMethod" is-config="true" duration-ms="1" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testF status=SUCCESS method=ScreenshotWithFailedTestCase.testF()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:org.screen.ScreenshotWithFailedTestCase@ed9d034]" name="afterClass" is-config="true" duration-ms="1" started-at="2023-02-03T05:58:15Z" finished-at="2023-02-03T05:58:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- org.screen.ScreenshotWithFailedTestCase -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
